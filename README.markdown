# Simulador de Elevadores

Bem-vindo ao **Simulador de Elevadores**, um projeto em Java que simula o funcionamento de elevadores em um pr√©dio, com uma interface gr√°fica interativa e funcionalidades avan√ßadas. Este projeto foi desenvolvido para modelar o comportamento de elevadores, considerando diferentes tipos de pain√©is de controle, heur√≠sticas de movimenta√ß√£o, hor√°rios de pico e fora de pico, al√©m de coletar m√©tricas detalhadas sobre o desempenho do sistema.

## Funcionalidades

- **Interface Gr√°fica Interativa**: Interface desenvolvida com Swing, permitindo configurar par√¢metros da simula√ß√£o (n√∫mero de andares, elevadores, capacidade, etc.) e visualizar o pr√©dio, elevadores, pessoas e estat√≠sticas em tempo real.
- **Tipos de Pain√©is de Controle**:
  - **√önico Bot√£o**: Um bot√£o geral para chamar o elevador.
  - **Dois Bot√µes**: Bot√µes separados para subir e descer.
  - **Painel Num√©rico**: Permite selecionar diretamente o andar de destino.
- **Heur√≠sticas de Movimenta√ß√£o**:
  - **Ordem de Chegada**: Atende chamadas na ordem em que s√£o recebidas.
  - **Otimiza√ß√£o de Tempo**: Prioriza andares com maior n√∫mero de pessoas aguardando.
  - **Otimiza√ß√£o de Energia**: Escolhe o andar mais pr√≥ximo para reduzir o consumo de energia.
- **Hor√°rios de Pico e Fora de Pico**: Ajusta o tempo de viagem dos elevadores com base no hor√°rio, simulando maior demanda em per√≠odos de pico.
- **Gerenciamento de Pessoas**: Suporte a pessoas com prioridade (ex.: idosos, PCDs), que s√£o atendidas primeiro.
- **Coleta de M√©tricas**: Registra estat√≠sticas como tempo m√©dio de espera, chamadas atendidas, energia consumida e n√∫mero de pessoas transportadas.
- **Logs de Elevadores**: Cada elevador mant√©m um registro de suas a√ß√µes (embarques, desembarques, escolhas de destino), exibido na interface.
- **Controle da Simula√ß√£o**: Bot√µes para pausar, continuar, reiniciar ou voltar √† configura√ß√£o, al√©m de um slider para ajustar a velocidade da simula√ß√£o.

## Estrutura do Projeto

O projeto √© organizado em classes que modelam os componentes do sistema:

- **Andar.java**: Representa um andar do pr√©dio, gerenciando pessoas aguardando e o painel de controle.
- **Elevador.java**: Modela um elevador, com l√≥gica para embarque/desembarque, movimenta√ß√£o e escolha de destinos com base na heur√≠stica selecionada.
- **CentralDeControle.java**: Coordena m√∫ltiplos elevadores, atualizando seus estados a cada minuto simulado.
- **InterfaceGrafica.java**: Implementa a interface gr√°fica com Swing, incluindo pain√©is de configura√ß√£o, visualiza√ß√£o do pr√©dio, estat√≠sticas e logs.
- **Estatisticas.java**: Coleta e calcula m√©tricas da simula√ß√£o.
- **Fila.java e FilaPrioridade.java**: Estruturas de dados para gerenciar filas de pessoas, com suporte a prioridade.
- **GerenciadorSimulacao.java**: Gera pessoas com atributos aleat√≥rios (origem, destino, prioridade, minuto de chegada).
- **EntidadeSimulavel.java**: Classe abstrata para entidades que evoluem com o tempo na simula√ß√£o.

## Requisitos

- **Java**: JDK 23 ou superior.
- **IDE**: Recomenda-se IntelliJ IDEA para facilitar a configura√ß√£o do projeto.
- **Bibliotecas**: Utiliza apenas bibliotecas padr√£o do Java (Swing, AWT, etc.), sem depend√™ncias externas.

## Como Executar

1. **Clone baixado**: O reposit√≥rio j√° foi clonado, como indicado no log do Git (`clone: from https://github.com/ricardosekeff/Elevador.git`).
2. **Configurar o Projeto**:
   - Abra o projeto na sua IDE (ex.: IntelliJ IDEA).
   - Certifique-se de que o JDK 23 est√° configurado (conforme `misc.xml`).
   - O arquivo `Elevador.iml` j√° define o m√≥dulo Java.
3. **Executar**:
   - Localize a classe `Main.java` (n√£o fornecida nos arquivos, mas mencionada em `workspace.xml`).
   - Execute a aplica√ß√£o a partir da classe `Main`.
4. **Configurar a Simula√ß√£o**:
   - Na interface gr√°fica, insira os par√¢metros desejados (andares, elevadores, capacidade, etc.).
   - Selecione a heur√≠stica e o tipo de painel.
   - Clique em "Iniciar Simula√ß√£o".
5. **Interagir com a Simula√ß√£o**:
   - Use os bot√µes de pausa, continua√ß√£o, rein√≠cio ou voltar √† configura√ß√£o.
   - Ajuste a velocidade da simula√ß√£o com o slider.
   - Visualize o pr√©dio, as estat√≠sticas e os logs dos elevadores.

## Exemplo de Configura√ß√£o

- **Andares**: 12
- **Elevadores**: 3
- **Capacidade M√°xima**: 5 pessoas por elevador
- **Tempo de Viagem (Pico)**: 2 minutos por andar
- **Tempo de Viagem (Fora de Pico)**: 1 minuto por andar
- **Heur√≠stica**: Otimiza√ß√£o de Energia
- **Painel**: Painel Num√©rico
- **Pessoas**: 300 (geradas aleatoriamente)

## Hist√≥rico de Desenvolvimento

O projeto foi desenvolvido em v√°rias etapas, conforme os commits no Git:

- **V1**: Implementa√ß√£o inicial com heur√≠sticas e tipos de painel.
- **Vswing**: Adi√ß√£o da interface gr√°fica com Swing.
- **Vswing-1**: Ajustes na l√≥gica de pessoas e logs dos elevadores.
- **√öltimo Commit** (7d9d293, 2025-05-14): Melhorias nos logs dos elevadores.

Consulte `.git/logs/` para mais detalhes sobre os commits.

## Contribui√ß√µes

Contribui√ß√µes s√£o bem-vindas! Para contribuir:

1. Fa√ßa um fork do reposit√≥rio.
2. Crie uma branch para sua feature (`git checkout -b feature/nova-funcionalidade`).
3. Commit suas altera√ß√µes (`git commit -m "Adiciona nova funcionalidade"`).
4. Envie para o reposit√≥rio remoto (`git push origin feature/nova-funcionalidade`).
5. Abra um Pull Request.

## Licen√ßa

Este projeto √© de c√≥digo aberto e est√° sob a licen√ßa MIT (a ser confirmada com o autor original).

## Contato

Para d√∫vidas ou sugest√µes, entre em contato com o autor:
- **Reinaldo Coelho**: [GitHub](https://github.com/DadosCoelho)

---

Desenvolvido com üíª e ‚òï por Reinaldo Coelho.